---
import Button from "../LinkButton.astro";
import enviroment from '../../data/Enviroment.json';
import { Image } from "astro:assets";
import '../../CSS/Section.css';
import '../../CSS/Global.css';
import '../../CSS/Background.css';
import '../../CSS/Utility.css';

import BeforeOven from "../../photos/HomeDisplay/BeforeOven.png";
import AfterOven from "../../photos/HomeDisplay/AfterOven.png";
import BeforeKitchen from "../../photos/HomeDisplay/MessyKitchen.jpg";
import AfterKitchen from "../../photos/HomeDisplay/CleanKitchen.jpg";
import BeforeStove from "../../photos/HomeDisplay/StoveBefore.jpg";
import AfterStove from "../../photos/HomeDisplay/StoveAfter.jpg";

const images = [BeforeOven, AfterOven, BeforeKitchen, AfterKitchen, BeforeStove, AfterStove];

const rootPath = enviroment.PublicRoot;
---

<section class="section">
    <div class="hero background-primary top-design-border bottom-design-border">
        <div class="home-layout container">
            <div class="title-section">
                <h1>Clean living<br>with shannon</h1>
                <div class="center-text-wrap">
                    <div class="center-text-align">
                        <p>Cleaning excellence, delivered with precision! <br class="mob-brk">We offer our Clean Living services for homes,<br id="lap-brk" class="mob-brk"> Airbnbs, and businesses in the <strong id="location-emphasis">East Texas area.</strong></p>
                    </div>
                </div>
            </div>
            <div class="button-container">
                <Button href={`${rootPath}/Contact`} text="Get In Touch!" textSize="var(--fnt-sz-48)" paddingT="3rem"  paddingB="2rem" paddingL="13rem" paddingR="13rem" br="1rem"/>
            </div>
            <div class="showcase-section">
                <span id="before-after-text" class="type-text type-text-load">Before:</span>
                <div class="album-container">
                    <div class="image-container home-hero-image left-image round-border">
                        <div class="rotated-image-wrapper">
                            <Image id="left-image" class="page-image round-border" src={images[0]} alt="left cleaning display image" width={304} sizes="(max-width: 800px) 100vw, 304px" loading={"lazy"} format="webp"/>
                        </div>
                    </div>
                    <div class="image-container home-hero-image center-image round-border">
                        <Image id="front-image" class="page-image round-border" src={images[0]} alt="middle cleaning display image" width={320} sizes="(max-width: 800px) 100vw, 320px" loading={"lazy"} format="webp"/>
                    </div>
                    <div class="image-container home-hero-image right-image round-border">
                        <div class="rotated-image-wrapper">
                            <Image id="right-image" class="page-image round-border" src={images[0]} alt="right cleaning display image" width={304} sizes="(max-width: 800px) 100vw, 304px" loading={"lazy"} format="webp"/>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>


<style>
    .home-layout{
        display: grid;
        height: 100%;
        align-items: start;
        grid-template-columns: 1fr 1fr;
        grid-template-rows: auto auto auto;
        row-gap: 0rem;
        column-gap: 5rem;
        box-sizing: border-box;
    }

    .round-border{
        border-radius: 1.8rem;
    }

    .title-section{
        margin-top: 5rem;
        margin-left: 3rem;
        grid-row: 1;
        grid-column: 1;
    }

    .showcase-section{
        height: fit-content;
        grid-column: 2;
        grid-row: 1 / span 3;
        text-align: center;
        display: flex;
        flex-direction: column;
        min-width: 0;
    }
    
    .button-container{
        grid-row: 2;
        grid-column: 1;
        width: fit-content;
        height: fit-content;
        min-width: 1rem;
        margin-top: 3rem;
        margin-left: 3rem;
        margin-bottom: 7rem;
    }

    .type-text{
        color: var(--highlight-secondary);
        font-size: 3rem;
        font-family: 'Verdana';
        text-transform: uppercase;
        font-weight: bold;
        user-select: none;
        margin-top: 3rem;
        display: block;
    }


    .type-text-fade-effect{
        animation: fade-color;
        animation-duration: 5s;
        animation-iteration-count: infinite;
    }

    .album-container{
        height: auto;
        width: auto;
        margin-top: 2.5rem;
        margin-left: 1rem;
        margin-right: 1rem;
        margin-bottom: 7rem;
        display: flex;
        justify-content: center;
    }

    .home-hero-image{
        width: 20rem;
        height: 30rem;
        min-width: 18rem;
        min-height: 30rem;
        filter: drop-shadow(-15px 15px 3px rgba(0, 0, 0, .3));
    }

    .left-image{
        z-index: 2;
        rotate: -11deg;
        translate: 12.5rem 0rem;
        animation: shuffle-left-card;
        animation-duration: 5s;
        animation-iteration-count: infinite;
    }

    .center-image{
        z-index: 3;
        min-width: 20rem;
    }

    .right-image{
        z-index: 1;
        rotate: 12deg;
        translate: -14rem 1rem;
        animation: shuffle-right-card;
        animation-duration: 5s;
        animation-iteration-count: infinite;
    }

    .rotated-image-wrapper{
        width: 100%;
        height: 100%;
        overflow: hidden;
    }

    h1{
        font-family: var(--font-primary);
        font-size: var(--fnt-sz-100);
        font-weight: 800;
        text-transform: uppercase;
        letter-spacing: var(--lt-spc-3);
        color: var(--highlight-primary);
    }

    p{
        margin-top: 1.8rem;
        margin-bottom: 1.8rem;
        color: var(--highlight-secondary);
        font-family: var(--font-primary);
        font-size: var(--fnt-sz-32);
        font-weight: 500;
        line-height: 2.55rem;
    }

    #location-emphasis{
        font-weight: 500;
    }

    /* laptops */
    @media (max-width: 1600px) and (min-width: 851px) {

        .title-section{
            margin-top: 3rem;
        }

        .button-container{
            margin-top: 3rem;
            margin-bottom: 5rem;
        }

        .mob-brk{
            display: none;
        }

        .home-hero-image{
            height: 20rem;
            width: 13rem;
            min-width: 13rem;
            min-height: 20rem;
        }

        .left-image{
            rotate: -12deg;
            translate: 8rem 0rem;
            animation: shuffle-left-card-laptop;
            animation-duration: 5s;
            animation-iteration-count: infinite;
        }

        .right-image{
            rotate: 8deg;
            translate: -9rem .5rem;
            animation: shuffle-right-card-laptop;
            animation-duration: 5s;
            animation-iteration-count: infinite;
        }

        h1{
            font-size: var(--fnt-sz-56);
        }

        p{
            font-size: var(--fnt-sz-24);
            margin-bottom: none;
            margin-top: 1rem;
            line-height: 2.25rem;
        }
    }

    /*tablet / large phone*/
    @media (max-width: 850px){

        .home-layout{
            grid-template-columns: 1fr;
            grid-template-rows: auto auto auto;
        }

        .button-container{
            display: flex;
            flex-direction: column;
            align-items: center;
            grid-row: 3;
            margin-left: 0rem;
            margin-top: 3rem;
            margin-bottom: 5rem;
            width: 100%;
        }

        .title-section,
        .button-container,
        .showcase-section{
            grid-column: 1;
        }

        .title-section{
            grid-row: 1;
            margin-left: 1rem;
        }

        .showcase-section{
            grid-row: 2;
            height: fit-content;
            width: 100%;
            max-width: 100%;
            box-sizing: border-box;
            margin-bottom: 0;
        }

        .album-container{
            margin-bottom: 0rem;
        }

        .home-hero-image{
            height: 17rem;
            width: 12rem;
            min-width: 12rem;
            min-height: 17rem;
        }

        .type-text{
            font-size: 2rem;
            margin-top: 1rem;
        }

        .mob-brk{
            display: none;
        }

        .left-image{
            rotate: -10deg;
            translate: 9rem 0rem;
            animation: shuffle-left-card-mobile;
            animation-duration: 5s;
            animation-iteration-count: infinite;
        }

        .right-image{
            rotate: 9deg;
            translate: -10rem .5rem;
            animation: shuffle-right-card-mobile;
            animation-duration: 5s;
            animation-iteration-count: infinite;
        }

        h1{
            font-size: var(--fnt-sz-48);
            text-align: center;
        }

        p{
            font-size: var(--fnt-sz-24);
            margin-bottom: 0;
            line-height: 2.25rem;
        }
    }

    /* small phones */
    @media (max-width: 380px)
    {
        p{
            font-size: var(--fnt-sz-16);
            margin-left: .5rem;
            line-height: 1.5rem;
        }

        .home-hero-image{
            height: 13rem;
            width: 8rem;
            min-width: 8rem;
            min-height: 13rem;
        }

        .left-image{
            rotate: -10deg;
            translate: 6rem 0rem;
            animation: shuffle-left-card-small-mobile;
            animation-duration: 5s;
            animation-iteration-count: infinite;
        }

        .right-image{
            rotate: 9deg;
            translate: -7rem .5rem;
            animation: shuffle-right-card-small-mobile;
            animation-duration: 5s;
            animation-iteration-count: infinite;
        }
    }

    @keyframes fade-color{
        0% {color: rgba(255, 255, 255, 0);}
        80% {color: rgba(255, 255, 255, 1);}
        100% {color: rgba(255, 255, 255, 0);}
    }

    @keyframes shuffle-left-card{
        0% {rotate: -11deg; translate: 12.5rem 0rem;}
        98% {rotate: -11deg; translate: 12.5rem 0rem;}
        100% {rotate: 0deg; translate: 17.5rem 0rem;}
    }

    @keyframes shuffle-right-card{
        0% {rotate: 12deg; translate: -14rem 1rem;}
        98% {rotate: 12deg; translate: -14rem 1rem;}
        100% {rotate: 0deg; translate: -17.5rem 0rem;}
    }

    @keyframes shuffle-left-card-laptop{
        0% {rotate: -12deg; translate: 8rem 0rem;}
        98% {rotate: -12deg; translate: 8rem 0rem;}
        100% {rotate: 0deg; translate: 12rem 0rem;}
    }

    @keyframes shuffle-right-card-laptop{
        0% {rotate: 8deg; translate: -9rem .5rem;}
        98% {rotate: 8deg; translate: -9rem .5rem;}
        100% {rotate: 0deg; translate: -11rem 0rem;}
    }

    @keyframes shuffle-left-card-mobile{
        0% {rotate: -10deg; translate: 9rem 0rem;}
        98% {rotate: -10deg; translate: 9rem 0rem;}
        100% {rotate: 0deg; translate: 13rem 0rem;}
    }

    @keyframes shuffle-right-card-mobile{
        0% {rotate: 9deg; translate: -10rem .5rem;}
        98% {rotate: 9deg; translate: -10rem .5rem;}
        100% {rotate: 0deg; translate: -12rem 0rem;}
    }

    @keyframes shuffle-left-card-small-mobile{
        0% {rotate: -10deg; translate: 6rem 0rem;}
        98% {rotate: -10deg; translate: 6rem 0rem;}
        100% {rotate: 0deg; translate: 9rem 0rem;}
    }

    @keyframes shuffle-right-card-small-mobile{
        0% {rotate: 9deg; translate: -7rem .5rem;}
        98% {rotate: 9deg; translate: -7rem .5rem;}
        100% {rotate: 0deg; translate: -9rem 0rem;}
    }

</style>

<script define:vars={{images : images}}>


    //before 0, after 1
    const beforeAfterPaths = new Map([
        ["Group0", [images[0].src, images[1].src]],
        ["Group1", [images[2].src, images[3].src]],
        ["Group2", [images[4].src, images[5].src]]
    ]);

    const frontImage = document.getElementById("front-image");
    const leftImage = document.getElementById("left-image");
    const rightImage = document.getElementById("right-image");
    const beforeAfterText = document.getElementById("before-after-text");

    function preLoadImage(src) {
        return new Promise((resolve, reject) => {
            const img = new Image();
            img.onload = () => resolve(img);
            img.onerror = () => reject(new Error(`Failed to load image: ${src}`));
            img.src = src;
        });
    }

    async function RotateImages(startGroup, startImage = 0){
        const objectSize = beforeAfterPaths.size - 1;
        
        let leftCardGroupIndex = 0;
        let leftCardImageIndex = 0;
        
        let rightCardGroupIndex = 0;
        let rightCardImageIndex = 0;

        // loop back around
        if(startImage === 0){

            leftCardGroupIndex = startGroup - 1;
            leftCardImageIndex = 1;

            rightCardGroupIndex = startGroup;
            rightCardImageIndex = startImage + 1;

        } else if (startImage === 1) {

            leftCardGroupIndex = startGroup;
            leftCardImageIndex = 0;

            rightCardGroupIndex = startGroup + 1;
            leftCardImageIndex = 0;
        }

        if(leftCardGroupIndex < 0){
            leftCardGroupIndex = objectSize;
        }

        if(rightCardGroupIndex > objectSize){
            rightCardGroupIndex = 0;
        }

        const frontKey = `Group${startGroup}`;
        const leftKey = `Group${leftCardGroupIndex}`;
        const rightKey = `Group${rightCardGroupIndex}`;

        const path1 = beforeAfterPaths.get(frontKey);
        const path2 = beforeAfterPaths.get(leftKey);
        const path3 = beforeAfterPaths.get(rightKey);
      
        if(path1 && path2 && path3){

            //preload images to sync on slow connections
            const [img1, img2, img3] = await Promise.all([
                preLoadImage(path1[startImage]),
                preLoadImage(path2[leftCardImageIndex]),
                preLoadImage(path3[rightCardImageIndex])
            ]);

            //set the images once they are loaded
            frontImage.setAttribute('src', img1.src);
            leftImage.setAttribute('src', img2.src);
            rightImage.setAttribute('src', img3.src);
        }
    }

    let currentCardIndex = Math.floor(Math.random() * beforeAfterPaths.size);
    let currentImageIndex = 0;

    RotateImages(currentCardIndex, currentImageIndex).then(() => {

        setInterval(async () => {
        
            currentImageIndex++;

            if(currentImageIndex > 1){
                currentImageIndex = 0;
                currentCardIndex++;
            }

            if(currentCardIndex >= beforeAfterPaths.size)
            {
                currentCardIndex = 0;
            }

            RotateImages(currentCardIndex, currentImageIndex);

            beforeAfterText.classList.add('type-text-fade-effect');
            beforeAfterText.innerHTML = (currentImageIndex == 0) ? "Before:" : "After:";

        }, 5000);

    });

</script>